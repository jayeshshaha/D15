** Models
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace dotnetapp.Models
{
    public class Employee
    {
        [Key]
        public int EmployeeId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int DepartmentId { get; set; }

        public Department Department { get; set; }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;
using System.Collections;

namespace dotnetapp.Models
{
    public class Department
    {
        [Key]
        public int DepartmentId { get; set; }
        public string Name { get; set; }
        public ICollection<Employee> Employees { get; set; }

    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using dotnetapp.Models;

namespace dotnetapp.Models
{
    public class ApplicationDbContext : DbContext
    {
        public DbSet<Department> Departments  { get; set; }
        public DbSet<Employee> Employees { get; set; }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options){
            
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder){
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Employee>()
            .HasOne<Department>(e => e.Department)
            .WithMany(e => e.Employees)
            .HasForeignKey(e => e.DepartmentId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<Department>().HasData(
                new Department(){
                    DepartmentId = 1,
                    Name = "Electrical"
            },
             new Department(){
                    DepartmentId = 2,
                    Name = "Computer Science"
            }
        );

        modelBuilder.Entity<Employee>().HasData(
            new Employee(){
                EmployeeId = 1,
                FirstName = "Jayesh",
                LastName = "Shaha",
                DepartmentId = 1
            },
            new Employee(){
                EmployeeId = 2,
                FirstName = "Alex",
                LastName = "Smith",
                DepartmentId = 1
            }
        );
        
    }

    }
}
-------------------------------------------------------------------------
** Controllers

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using dotnetapp.Models;

using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace dotnetapp.Controllers
{
    
    public class DepartmentController : Controller
    {
        private readonly ApplicationDbContext ctx;
        public DepartmentController(ApplicationDbContext context){
            ctx = context;
        }
       
        public IActionResult Index()
        {
            List<Department> departmentmodel = ctx.Departments.ToList();
            return View(departmentmodel);
        }

        public IActionResult Details(int id)
        {
            if(id == null){
                return NotFound();
            }

            var department = ctx.Departments.Find(id);
            if(department == null){
                return NotFound();
            }
            Department departmentmodel = new Department(){
                DepartmentId = department.DepartmentId,
                Name = department.Name
            };

             return View(departmentmodel);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Create(Department department)
        {
            Console.WriteLine(department.DepartmentId);
            ctx.Departments.Add(department);
            ctx.SaveChanges();
            return RedirectToAction("Index");
           
        }

        public IActionResult Edit(int id)
        {
            var department = ctx.Departments.Find(id);
            if(department == null){
                return NotFound();
            }
            Department dm = new Department(){
                DepartmentId = department.DepartmentId,
                Name = department.Name
            };
            return View(dm);
        }
        
        [HttpPost]
        public IActionResult Edit(int id,Department department )
        {
            var department1 = ctx.Departments.Find(id);
            if(department == null){
                return NotFound();
            }
            department1.Name = department.Name;
            ctx.SaveChanges();
            return RedirectToAction("Index");;
        }

        public IActionResult Delete(int id)
        {
            var department = ctx.Departments.Find(id);
            if(department == null){
                return NotFound();
            }
            Department dm = new Department(){
                DepartmentId = department.DepartmentId,
                Name = department.Name
            };
            return View(dm);
        }
        

        public IActionResult DeleteConfirmed(int id)
        {
            var department = ctx.Departments.Find(id);
            if(department == null){
                return NotFound();
            }
            ctx.Departments.Remove(department);
            ctx.SaveChanges();
            return RedirectToAction("Index");
        }

    }
}

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using dotnetapp.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;


namespace dotnetapp.Controllers
{
    
    public class EmployeeController : Controller
    {
        private readonly ApplicationDbContext ctx;
        public EmployeeController(ApplicationDbContext context){
            ctx = context;
        }
       
        public IActionResult Index()
        {
           List<Employee> li = ctx.Employees.Include(i => i.Department).ToList();
           return View(li);
        }

        public IActionResult Details(int id)
        {

            if(id == null){
                return NotFound();
            }

            var employee = ctx.Employees.Find(id);
            if(employee == null){
                return NotFound();
            }
            Employee emp = new Employee(){
                FirstName = employee.FirstName,
                LastName = employee.LastName,
                DepartmentId = employee.DepartmentId
            };

            
            return View(emp);
        }
       
        public IActionResult Create()
        {
            List<Department> li = ctx.Departments.ToList();
            ViewBag.li= li;
            return View();
        }
        
        [HttpPost]
        public IActionResult Create(Employee employee)
        {
            ctx.Employees.Add(employee);
            ctx.SaveChanges();
           return RedirectToAction("Index");
        
        }

        public IActionResult Edit(int id)
        {
            List<Department> Departments  = ctx.Departments.ToList();
            ViewBag.Departments= Departments;

            var emp = ctx.Employees.Find(id);
            if (emp == null)
            {
               return NotFound(); 
            }
            // Employee employee = new Employee(){
            //     EmployeeId = emp.EmployeeId,
            //     FirstName = emp.FirstName,
            //     LastName = emp.LastName,
            //     DepartmentId = emp.DepartmentId
            // };
            return View(emp);
            
        }

        
        [HttpPost]
        public IActionResult Edit(int id, Employee employee)
        {
            var emp = ctx.Employees.Find(id);
            if (emp == null)
            {
               return NotFound(); 
            }
            emp.FirstName = employee.FirstName;
            emp.LastName = employee.LastName;
            emp.DepartmentId = employee.DepartmentId;
            ctx.SaveChanges();
            return RedirectToAction("Index");
        }

        public IActionResult Delete(int id)
        {
            var emp = ctx.Employees.Find(id);
            if (emp == null)
            {
               return NotFound(); 
            }
            // Employee employee = new Employee(){
            //     EmployeeId = emp.EmployeeId,
            //     FirstName = emp.FirstName,
            //     LastName = emp.LastName,
            //     DepartmentId = emp.DepartmentId
            // };
            return View(emp);
        }
        
      
        public IActionResult DeleteConfirmed(int id)
        {
            
            var emp = ctx.Employees.Find(id);
            if (emp == null)
            {
               return NotFound(); 
            }
            ctx.Employees.Remove(emp);
            ctx.SaveChanges();
            return RedirectToAction("Index");
        }
    }
}


-------------------------------------------------------------------------
** Views

@model List<Department>
<h1>Departments</h1>
<table class="table">
    <thead>
        <tr>
            <td>Name</td>
            <td>Action</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var i in Model)
        {
       <tr>
            <td>@i.Name</td>
            <td>
                <a asp-action="Edit" asp-route-id="@i.DepartmentId" class="btn btn-secondary">Edit</a>
                <a asp-action="Delete" asp-route-id="@i.DepartmentId" class="btn btn-danger">Delete</a>
            </td>
        </tr>  
        }
    </tbody>
</table>

--

@model Department;

<form  method="post">
    <input type="text" asp-for="Name">
    <button type="submit">Submit</button>
</form>

--
@model Department;

<form  method="post">
    <input type="text" asp-for="Name">
    <button type="submit">Save</button>
</form>

--
@model Department;
<h1>Are u sure ?</h1>
<a  asp-action="DeleteConfirmed"  asp-route-id="@Model.DepartmentId">Delete</a>

----------------
@model List<Employee>;

<table class="table">
     <thead>
        <tr>
            <td>First Name</td>
            <td>Last Name</td>
            <td>Department</td>
            <td>Action</td>
        </tr>
     </thead>
     <tbody>
        @foreach (var i in Model)
        {
        <tr>
            <td>@i.FirstName</td>
            <td>@i.LastName</td>
            <td>@i.Department.Name</td>
            <td>
                <a asp-action="Edit" asp-route-id="@i.EmployeeId" class="btn btn-secondary">Edit</a>
                <a asp-action="Delete" asp-route-id="@i.EmployeeId" class="btn btn-danger">Delete</a>
            </td>
        </tr>
            
        }
        
     </tbody>
</table>

--
@model Employee;


<form  method="post">
    <input type="text" asp-for="FirstName" placeholder="First name">
    <br>
    <input type="text" asp-for="LastName" placeholder="Last name">
    <br>

    <select asp-for="DepartmentId" >
        @foreach (var i in ViewBag.li)
        {  
            <option value="@i.DepartmentId">@i.Name</option>   
        }
    </select>

    
    <br>
    <button type="submit">Submit</button>
</form>

--

@model Employee;

<form  method="post">
    <input type="text" asp-for="FirstName" placeholder="First name">
    <br>
    <input type="text" asp-for="LastName" placeholder="Last name">
    <br>

    <select asp-for="DepartmentId" >
        @foreach (var i in ViewBag.Departments)
        {  
            <option value="@i.DepartmentId">@i.Name</option>   
        }
    </select>

    
    <br>
    <button type="submit">Save</button>
</form>

--


@model Employee;
<h1>Are u sure ?</h1>
<a  asp-action="DeleteConfirmed"  asp-route-id="@Model.EmployeeId">Delete</a>


